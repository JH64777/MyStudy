데코레이터는 어떤 함수가 있을 떄 함수를 직접 수정하지 않고 함수에 기능을 추가하고자 할 때 사용

데코레이터 함수
1. 함수 객체를 매개변수로 받음
2. 부가적인 기능을 추가하는 새로운 함수 생성
3. 부가적인 기능이 추가된 새로운 함수 객체를 반환

def hello():
    print("Hello!")

def deco(func):
     def new_func(): # 새로운 기능을 추가한 새로운 함수
         print("새로운 기능1")
         func() # 기존 함수
         print("새로운 기능2")
     return new_func() # 기존 함수를 수정하지 않고 부가적인 기능을 추가한 새로운 함수 객체 반환


decoratedFunction = deco(hello) # hello 함수에 부가적인 기능을 추가한 함수 객체를 반환

위 deco함수가 바로 데코레이터 함수
python에서 @ 기호를 통해서 위 기능을 쉽게 사용할 수 있게끔 만듦


새로운 함수 Hello2가 있으며 해당 함수는 "Hello2"를 출력한다고 했을 때 (deco 함수(데코레이터 함수)가 이미 정의 되어있다고 가정을 해야 함)

@deco
def Hello2():
    print("Hello2")

위와 같이 코드를 작성하면

나중에 Hello2()를 호출하면 아래와 같은 결과가 나옴
"새로운 기능1"
"Hello2"
"새로운 기능2"

이런식으로 데코레이터를 사용하면 기존 함수를 직접 수정하지 않고도 함수에 새로운 기능을 추가할 수 있음